name: CCTracker BETA Release

# Auslöser: Nur manueller dispatch und auf "development" branch beschränkt
on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: "The branch to run this workflow on"
        default: "development"
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.target_branch }}
        path: 'barnysCCTracker'

    - name: Set Test only
      id: test_only
      run: |
        echo "TEST_ONLY=false" >> $GITHUB_ENV

    - name: Detect Manifest File
      id: detect_manifest
      run: |
        if [ -f barnysCCTracker/barnysCCTracker.addon ]; then
          echo "MANIFEST=barnysCCTracker/barnysCCTracker.addon" >> $GITHUB_ENV
        elif [ -f barnysCCTracker/barnysCCTracker.txt ]; then
          echo "MANIFEST=barnysCCTracker/barnysCCTracker.txt" >> $GITHUB_ENV
        else
          echo "❌ Keine Manifest-Datei gefunden!" >&2
          exit 1
        fi

    - name: Extract API Versions and Addon Version
      id: version_info
      run: |
        MANIFEST_FILE=$MANIFEST

        # Alle API-Versionen extrahieren
        APIVersions=$(grep -Po '(?<=## APIVersion: )[\d\s]+' "$MANIFEST_FILE" | tr -s ' ' | sed 's/ *$//')
        
        # Addon-Version extrahieren
        AddonVersion=$(grep -Po '(?<=## Version: )[\d.]+' "$MANIFEST_FILE")

        echo "API_VERSION=$APIVersions" >> $GITHUB_ENV
        echo "ADDON_VERSION=$AddonVersion" >> $GITHUB_ENV

        echo "Gefundene API-Versionen: $APIVersions"
        echo "Addon-Version: $AddonVersion"

    - name: Get Compatible Patch IDs
      id: get_patch_ids
      run: |
        echo "Hole Patch-IDs für API-Versionen: $API_VERSION"
        APIList=$(echo "$API_VERSION" | tr ' ' '\n')

        # Hole alle Patch-IDs von ESOUI
        CompatibleList=$(curl -s -H "x-api-token: ${{ secrets.ESOUI_API_TOKEN }}" "https://api.esoui.com/addons/compatible.json")

        PatchIDs=""
        for api in $APIList; do
          PatchID=$(echo "$CompatibleList" | jq -r ".[] | select(.interface == \"$api\") | .id")
          if [ -z "$PatchID" ]; then
            echo "❌ Keine Patch-ID für API-Version $api gefunden!" >&2
            exit 1
          fi
          if [ -z "$PatchIDs" ]; then
            PatchIDs="$PatchID"
          else
            PatchIDs="$PatchIDs,$PatchID"
          fi
        done

        echo "PATCH_IDS=$PatchIDs" >> $GITHUB_ENV
        echo "Gefundene Patch-IDs: $PatchIDs"

    - name: Extract Changelog
      id: changelog
      run: |
        Changelog=$(cat barnysCCTracker/Changelog.txt)
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$Changelog" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Zip Addon Files (excluding .gitattributes)
      run: 7z a ./barnysCCTracker/barnysCCTracker_${{ env.ADDON_VERSION }}_beta.zip * -xr!*.git* -xr!*README.md

    - name: Upload Addon to ESOUI with PowerShell
      shell: pwsh
      run: |
        $baseDir = Get-Location
        $changelogPath = "$baseDir/barnysCCTracker/Changelog.txt"
        $readmePath = "$baseDir/barnysCCTracker/README_BETA.md"
        Write-Host "Changelog Path: $changelogPath" # Debugging-Ausgabe
        Write-Host "Readme Path: $readmePath" # Debugging-Ausgabe
        ./barnysCCTracker/.github/scripts/upload_to_esoui.ps1 `
          -ApiToken "${{ secrets.ESOUI_API_TOKEN }}" `
          -AddonId 3988 `
          -Title "barny's CC Tracker - beta" `
          -Version "${{ env.ADDON_VERSION }} - beta" `
          -FilePath "./barnysCCTracker/barnysCCTracker_${{ env.ADDON_VERSION }}_beta.zip" `
          -ChangelogFilePath "$changelogPath" `
          -Compatible "${{ env.PATCH_IDS }}" `
          -ReadmeFilePath "$readmePath" `
          -Archive "No" `
          -TestOnly "${{ env.TEST_ONLY }}"
